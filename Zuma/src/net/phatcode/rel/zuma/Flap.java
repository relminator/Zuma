package net.phatcode.rel.zuma;

import java.applet.AudioClip;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;
/** <p>An object implementing {@link java.applet.AudioClip java.applet.AudioClip} with the data from attack.wav hard-coded into it.</p>
 * <p>Created with the <a href="http://stephengware.com/projects/soundtoclass">SoundToClass tool</a>, by Stephen G. Ware.</p>
 * @author Stephen G. Ware */
public class Flap implements AudioClip {
	private byte[] data;
	private AudioFormat format;
	private DataLine.Info lineInfo = null;
	private PlayThread playThread = null;
	private LoopThread loopThread = null;
	//private static final long serialVersionUID = 8078;
	private static byte[] data0(){ return new byte[] {-128,-97,-79,-65,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-60,-58,-58,-58,-58,-63,-71,-92,-105,-116,-109,-119,-128,113,110,107,102,105,115,-116,-108,-105,-113,-109,-122,123,110,110,108,94,77,61,58,58,58,58,58,59,59,58,58,58,58,58,58,58,58,58,58,59,64,81,100,-113,-89,-71,-65,-58,-58,-58,-58,-58,-58,-58,-58,-58,-58,-60,-62,-62,-58,-58,-58,-62,-65,-79,-98,-113,-111,-114,-125,115,108,108,102,105,116,-114,-109,-108,-114,-111,-127,121,108,115,102,91,69,64,58,58,58,58,62,61,58,58,58,58,58,58,58,58,58,58,64,70,91,118,-98,-82,-68,-60,-58,-58,-58,-58,-58,-58,-58,-58,-58,-65,-66,-58,-58,-58,-58,-68,-76,-95,-109,-116,-113,-125,118,108,110,102,107,121,-114,-109,-111,-116,-116,124,115,108,112,97,80,65,59,58,58,58,64,62,58,58,58,58,58,58,58,58,58,61,69,81,102,-114,-89,-71,-66,-58,-58,-58,-58,-58,-58,-58,-58,-58,-66,-68,-62,-58,-58,-62,-70,-81,-98,-114,-111,-117,-128,112,113,105,107,116,-116,-111,-109,-116,-116,124,113,112,110,96,75,69,58,58,58,62,65,62,58,58,58,58,58,58,58,58,59,69,83,102,-109,-89,-73,-65,-58,-58,-58,-58,-58,-58,-58,-58,-63,-66,-68,-58,-58,-62,-73,-82,-100,-114,-113,-117,-128,112,113,104,108,121,-113,-108,-113,-111,-124,121,108,113,99,83,69,61,58,58,65,67,62,58,58,58,58,58,58,58,58,65,73,91,118,-101,-79,-71,-58,-58,-58,-58,-58,-58,-58,-58,-65,-71,-68,-58,-58,-65,-73,-90,-105,-117,-114,-125,116,113,110,108,115,-117,-111,-113,-116,-121,123,110,115,102,85,70,62,58,58,69,67,61,59,58,58,58,58,58,58,67,73,91,113,-103,-84,-73,-58,-58,-58,-58,-58,-58,-58,-60,-70,-74,-68,-58,-58,-71,-79,-101,-114,-113,-121,124,110,110,107,113,-117,-113,-113,-114,-121,121,110,113,99,80,73,59,58,58,72,70,59,59,58,58,58,58,58,58,73,88,108,-108,-90,-76,-60,-62,-60,-58,-58,-58,-65,-65,-73,-74,-58,-58,-68,-76,-92,-109,-119,-116,-127,113,113,107,112,-124,-113,-113,-116,-122,121,110,113,99,78,72,58,58,70,72,65,62,58,58,58,59,61,59,73,85,105,-111,-90,-78,-63,-63,-63,-58,-58,-58,-66,-68,-74,-74,-58,-62,-73,-79,-100,-114,-114,-124,120,115,110,110,126,-113,-111,-117,-121,121,112,113,100,80,72,61,58,73,73,67,65,58,58,58,61,61,69,78,94,120,-98,-81,-74,-63,-63,-62,-58,-58,-68,-70,-76,-76,-62,-63,-79,-87,-105,-119,-116,-127,115,113,108,115,-119,-113,-116,-116,124,115,118,104,86,78,62,59,73,75,69,67,58,58,61,62,62,73,81,104,-117,-93,-81,-66,-68,-66,-58,-58,-65,-68,-79,-79,-63,-66,-76,-82,-105,-117,-116,-127,116,116,108,115,-119,-113,-117,-117,124,113,115,102,80,73,64,64,78,75,65,62,58,58,65,65,72,81,97,-122,-97,-84,-68,-70,-68,-58,-58,-70,-70,-81,-81,-65,-68,-82,-92,-106,-121,-119,124,113,112,112,-125,-114,-116,-116,126,115,116,104,85,77,67,65,80,77,69,62,58,61,67,67,77,85,105,-114,-92,-82,-70,-70,-68,-58,-66,-73,-81,-84,-68,-70,-79,-87,-106,-121,-119,126,113,112,112,-125,-116,-116,-117,124,113,115,102,81,75,65,73,81,73,72,61,58,69,70,70,85,99,-124,-97,-84,-71,-71,-70,-58,-66,-74,-82,-84,-70,-71,-84,-93,-109,-121,-122,120,116,110,116,-119,-113,-119,-122,120,118,108,89,81,70,69,83,78,75,62,59,70,72,72,86,100,-119,-98,-84,-73,-73,-70,-63,-73,-76,-86,-84,-71,-76,-87,-103,-117,-117,-127,115,115,113,-125,-116,-117,-121,123,116,112,93,83,72,70,85,78,77,64,61,72,73,78,88,107,-113,-90,-84,-76,-76,-63,-68,-79,-81,-87,-76,-76,-86,-93,-111,-119,-125,118,115,113,126,-116,-117,-121,123,116,108,94,85,73,75,85,78,77,67,65,75,73,85,97,121,-103,-89,-76,-78,-76,-66,-76,-79,-87,-87,-76,-84,-93,-109,-121,-124,120,115,115,126,-117,-119,-121,121,118,108,91,83,73,83,85,77,73,65,75,77,77,89,105,-116,-95,-87,-79,-79,-68,-71,-81,-89,-89,-76,-82,-92,-109,-122,-124,120,116,115,126,-117,-119,-122,120,120,107,89,81,75,88,88,80,70,67,78,77,86,96,121,-105,-90,-81,-81,-71,-73,-84,-87,-90,-79,-82,-92,-109,-122,-122,120,116,115,-125,-117,-121,-125,118,118,104,91,78,77,89,83,81,72,73,78,78,91,107,-114,-95,-84,-82,-81,-73,-82,-87,-92,-81,-81,-93,-109,-122,-122,121,118,115,-125,-117,-121,-125,118,118,102,91,80,83,89,83,80,70,80,81,86,97,121,-105,-92,-82,-84,-74,-79,-84,-92,-90,-82,-93,-105,-121,-121,123,118,115,126,-117,-121,-125,118,116,100,91,81,88,91}; }
	private static byte[] data1(){ return new byte[] {83,77,72,83,81,91,104,-121,-97,-87,-86,-82,-78,-87,-92,-95,-82,-90,-98,-114,-119,-128,116,113,121,-119,-121,-124,120,118,104,93,83,89,91,85,77,73,83,83,94,108,-113,-98,-86,-86,-78,-79,-89,-95,-92,-87,-97,-109,-122,-122,120,116,116,-121,-119,-121,123,121,110,96,85,85,93,86,80,77,86,85,94,108,-114,-98,-87,-89,-79,-84,-89,-95,-87,-87,-98,-113,-122,-127,118,115,121,-119,-122,-128,118,115,99,91,85,96,89,86,77,86,86,94,107,-119,-100,-89,-89,-81,-84,-90,-97,-90,-89,-98,-114,-121,-128,120,116,126,-119,-122,126,120,112,97,86,88,94,88,81,81,88,88,99,120,-109,-98,-92,-90,-84,-93,-97,-98,-90,-100,-113,-124,-127,118,115,124,-121,-122,126,120,112,97,88,91,96,91,83,86,89,94,105,-125,-103,-92,-92,-84,-87,-93,-98,-92,-93,-101,-119,-122,124,118,118,-122,-121,-125,120,118,100,93,89,97,91,85,85,89,93,104,-128,-105,-93,-92,-86,-89,-95,-101,-92,-97,-106,-122,-122,121,118,120,-121,-124,126,118,113,100,91,97,97,93,85,91,91,100,113,-113,-101,-95,-93,-89,-97,-101,-95,-95,-103,-119,-122,123,120,120,-121,-122,-128,118,115,100,93,99,99,94,86,94,93,102,118,-109,-100,-95,-90,-92,-98,-103,-93,-101,-111,-124,-127,120,118,-127,-119,-122,121,120,107,96,93,100,94,89,93,94,100,113,-114,-103,-98,-95,-92,-98,-103,-95,-101,-113,-124,-128,120,120,-125,-121,-125,121,118,104,94,97,102,97,89,96,96,104,121,-109,-100,-98,-92,-98,-103,-103,-98,-106,-119,-122,123,120,123,-122,-122,124,121,108,99,96,102,99,91,96,96,105,121,-113,-101,-98,-93,-100,-103,-105,-100,-106,-121,-124,121,118,124,-121,-124,121,120,105,97,102,102,97,91,97,99,112,-121,-108,-100,-100,-97,-101,-106,-98,-106,-117,-122,126,121,121,-122,-124,126,123,108,100,99,104,100,93,99,99,112,-122,-108,-101,-100,-97,-103,-108,-101,-109,-119,-124,123,120,124,-121,-124,121,120,105,99,105,102,99,96,100,105,115,-116,-106,-103,-97,-103,-108,-103,-105,-114,-125,-128,123,121,-122,-124,124,121,110,100,104,105,100,96,100,105,116,-116,-106,-103,-98,-105,-109,-105,-106,-114,-125,-128,123,121,-124,-125,126,123,110,102,104,107,102,97,102,104,113,-122,-111,-105,-105,-101,-106,-111,-103,-109,-119,-125,-128,123,121,-124,-125,126,121,118,108,102,108,105,102,99,104,105,112,-127,-113,-106,-106,-101,-106,-109,-111,-105,-111,-119,-125,-128,123,121,-127,-122,-124,124,123,115,108,104,108,107,105,99,105,104,110,118,-121,-113,-108,-108,-103,-106,-109,-113,-106,-109,-114,-124,-124,126,123,121,-127,-124,-125,126,123,120,112,107,105,110,108,105,102,105,107,110,113,-128,-117,-113,-109,-109,-105,-108,-109,-113,-109,-109,-114,-119,-125,-125,126,123,121,126,-124,-125,-127,124,124,120,112,108,107,112,110,108,105,104,108,107,112,116,124,-119,-114,-111,-109,-108,-108,-111,-113,-114,-113,-111,-114,-117,-124,-125,-128,124,123,123,126,-117,-111,-107,-110,-113,-113,-118,-123,-126,-128,-124,-123,-126,-128,125,127,127,-128,-123,-121,-113,-104,-101,-104,-107,-110,-104,-107,-113,-118,-122,-123,-119,-120,-120,-116,-119,-121,-123,-123,124,121,117,120,125,121,116,108,103,103,102,97,94,92,90,91,94,92,91,89,87,87,91,91,91,95,99,110,123,-115,-106,-98,-96,-94,-91,-93,-94,-94,-97,-97,-96,-94,-96,-98,-101,-106,-107,-105,-108,-114,-114,-119,-125,-128,-123,-121,-127,125,120,118,116,117,117,120,121,118,116,119,116,113,107,111,104,99,95,94,92,92,95,95,101,104,110,114,116,118,119,119,119,121,121,119,120,122,126,-122,-111,-103,-100,-100,-101,-102,-105,-107,-107,-107,-108,-112,-112,-114,-115,-112,-108,-107,-105,-110,-113,-119,-125,127,-128,124,120,114,112,108,108,112,120,123,122,119,119,114,111,107,108,107,102,97,96,97,99,99,104,107,110,111,113,114,116,116,116,116,118,119,122,123,127,-117,-110,-105,-105,-101,-99,-99,-101,-102,-102,-104,-105,-107,-111,-110,-110,-108,-110,-114,-116,-119,-124,-128,-126,-124,-127,124,124,122,121,122,-127,-128,-125,127,127,121,116,116,114,108,102,101,99,100,99,101,101,101,99,97,97,97,97,99,99,99,100,103,108,113,126,-122,-117,-110,-107,-105,-105,-104,-104,-102,-102,-102,-104,-105,-105,-101,-102,-104,-107,-111,-116,-120,-120,-121,-124,127,127,127,126,-127,-120,-120,-121,-121,-126,126,122,123,119,115,111,106,105,105,107,108,105,105,105,105,107,107,107,107,107,109,112,117,125,-123,-116,-114,-110,-110,-110,-112,-112,-112,-113,-113,-115,-117,-116,-113,-113,-115,-118,-122,-127,127,127,123,119,118,117,117,119,126,127,127,126,125,121,117,119,115,111,107,105,103,103,109,108,108,108,107,107,108,108,108,108,111,113,118,124,-120,-115,-112,-107,-107,-107,-107,-107,-107,-107,-108,-111,-112,-110,-108}; }
	private static byte[] data2(){ return new byte[] {-108,-112,-114,-121,-123,-123,-125,126,122,122,121,123,-125,-124,-124,-124,-126,125,122,123,119,114,112,108,107,105,109,109,106,106,105,105,105,105,105,105,110,116,122,-123,-118,-114,-109,-110,-109,-108,-108,-108,-110,-110,-113,-113,-108,-108,-111,-114,-118,-123,-126,-125,-128,123,123,121,123,-127,-124,-124,-125,-127,125,122,123,119,113,111,107,107,111,111,109,109,107,107,107,108,108,108,112,115,121,-124,-118,-114,-110,-110,-110,-108,-108,-108,-111,-111,-113,-113,-108,-110,-113,-114,-120,-124,-124,-127,125,124,122,122,127,-124,-124,-125,-126,125,123,123,119,114,111,108,107,112,112,110,109,107,107,107,108,108,111,113,118,125,-120,-115,-113,-110,-110,-110,-108,-108,-111,-112,-114,-114,-110,-110,-114,-117,-122,-126,-125,-128,124,123,122,124,-126,-124,-125,-125,126,124,125,121,115,113,109,108,112,112,111,110,107,107,108,109,109,112,114,121,-125,-118,-115,-111,-111,-111,-108,-108,-110,-111,-114,-114,-110,-111,-114,-115,-122,-125,-125,-128,124,124,122,124,-126,-124,-125,-125,126,123,124,120,114,112,109,109,113,112,109,109,107,107,109,109,111,114,119,-127,-120,-116,-111,-112,-111,-108,-108,-112,-112,-115,-115,-110,-111,-115,-118,-122,-126,-126,126,123,123,123,-128,-124,-125,-125,127,124,124,121,115,113,110,109,114,113,111,109,107,108,110,110,113,115,121,-124,-118,-115,-112,-112,-111,-108,-111,-113,-115,-116,-111,-112,-114,-117,-122,-126,-126,127,123,123,123,-128,-125,-125,-125,126,123,124,120,114,112,109,112,114,112,111,108,107,111,111,111,115,119,-127,-120,-116,-112,-112,-112,-108,-111,-113,-115,-116,-112,-112,-116,-118,-123,-126,-127,125,124,122,124,-126,-124,-126,-127,125,125,122,116,114,111,111,115,113,112,109,108,111,111,111,115,119,-126,-120,-116,-113,-113,-112,-110,-113,-114,-116,-116,-112,-114,-117,-121,-125,-125,-128,124,124,123,-128,-125,-125,-126,126,124,123,117,115,111,111,115,113,113,109,108,111,112,113,116,121,-124,-118,-116,-114,-114,-110,-111,-114,-115,-117,-114,-114,-116,-118,-124,-126,-128,125,124,123,127,-125,-125,-126,126,124,122,118,115,112,112,115,113,113,110,109,112,112,115,119,125,-121,-117,-114,-114,-114,-111,-114,-114,-117,-117,-114,-116,-118,-123,-126,-127,125,124,124,127,-125,-126,-126,125,125,122,117,115,112,115,115,113,112,109,112,113,113,116,121,-125,-119,-117,-114,-114,-111,-112,-115,-117,-117,-114,-115,-118,-123,-127,-127,125,124,124,127,-125,-126,-127,125,125,121,116,114,112,116,116,114,111,110,113,113,115,118,125,-122,-118,-115,-115,-112,-113,-116,-117,-118,-114,-115,-118,-123,-127,-127,125,124,124,-128,-125,-126,-128,125,125,121,117,113,113,116,115,114,111,112,113,113,117,121,-124,-119,-116,-115,-115,-113,-115,-117,-118,-115,-115,-118,-123,-127,-127,125,125,124,-128,-125,-126,-128,125,125,120,117,114,115,116,115,114,111,114,114,115,119,125,-122,-118,-115,-116,-113,-114,-116,-118,-118,-115,-118,-122,-126,-126,126,125,124,127,-125,-126,-128,125,124,119,117,114,116,117,115,113,111,115,114,117,121,-126,-120,-117,-116,-115,-114,-117,-118,-119,-115,-118,-120,-124,-126,-128,124,123,125,-126,-126,-127,125,125,121,117,115,116,117,115,113,112,115,115,118,122,-124,-120,-116,-116,-114,-114,-117,-119,-118,-117,-120,-123,-127,-127,125,124,124,-126,-126,-126,126,125,122,118,115,115,117,115,114,113,115,115,118,122,-124,-120,-117,-117,-114,-116,-117,-119,-117,-117,-120,-124,-127,-128,125,124,125,-126,-127,-128,125,124,119,117,115,118,116,115,113,115,115,118,121,-126,-120,-117,-117,-115,-116,-118,-120,-118,-117,-120,-124,-126,-128,125,124,127,-126,-127,127,125,123,119,115,116,118,116,114,114,116,116,119,125,-123,-120,-118,-118,-116,-118,-120,-120,-118,-120,-124,-127,-128,125,124,126,-126,-127,127,125,123,119,116,117,118,117,115,115,116,118,121,-128,-121,-118,-118,-116,-117,-118,-120,-118,-118,-121,-126,-127,126,125,125,-127,-126,-128,125,125,119,117,116,119,117,115,115,116,117,121,-128,-122,-118,-118,-116,-117,-119,-121,-118,-120,-122,-127,-127,125,125,125,-126,-127,127,125,123,119,117,119,119,117,115,117,117,119,123,-124,-121,-119,-118,-117,-120,-121,-119,-119,-121,-126,-127,126,125,125,-126,-127,-128,125,124,119,117,119,119,118,115,118,117,120,125,-123,-120,-119,-118,-118,-120,-121,-118,-121,-124,-127,-128,125,125,-128,-126,-127,125,125,121,118,117,119,118,116,117,118,119,123,-124,-121,-120,-119,-118,-120,-121,-119,-121,-124,-127,-128,125,125,-128,-126,-128,125,125,121,118,119,120,119,116,118,118,121,125,-123,-120,-120,-118,-120,-121,-121,-120,-122,-126,-127,126,125,126,-127,-127,126,125,122,119,118,120,119,117,118,118,121,125,-124,-121,-120,-118,-120,-121,-122,-120,-122,-126,-127,125,125,126,-126,-127,125,125,121,119,120,120,119,117,119,119,123,-126,-123,-120,-120,-120,-121,-122,-120,-122,-125,-127,127,125}; }
	private static byte[] data3(){ return new byte[] {125,-127,-127,127,126,122,119,119,121,119,117,119,119,123,-127,-123,-121,-120,-120,-121,-123,-121,-123,-126,-127,126,125,126,-126,-127,125,125,121,119,121,120,119,118,119,121,124,-125,-122,-121,-120,-121,-123,-121,-122,-124,-128,-128,126,125,-127,-127,126,125,122,119,121,121,119,118,119,121,124,-125,-122,-121,-120,-122,-123,-122,-122,-124,-128,-128,126,125,-127,-128,127,126,122,120,121,121,120,119,120,121,123,-127,-124,-122,-122,-121,-122,-124,-121,-123,-126,-128,-128,126,125,-127,-128,127,125,125,122,120,122,121,120,119,121,121,123,-128,-124,-122,-122,-121,-122,-123,-124,-122,-124,-126,-128,-128,126,125,-128,-127,-127,126,126,124,122,121,122,121,121,119,121,121,122,125,-126,-124,-123,-123,-121,-122,-123,-124,-122,-123,-124,-127,-127,127,126,125,-128,-127,-128,127,126,125,123,121,121,122,122,121,120,121,121,122,123,-128,-125,-124,-123,-123,-122,-123,-123,-124,-123,-123,-124,-126,-128,-128,127,126,125,127,-127,-128,-128,126,126,125,123,122,121,123,122,122,121,121,122,121,123,124,126,-126,-124,-124,-123,-123,-123,-124,-124,-124,-124,-124,-124,-125,-127,-128,-128,126,126,126,127,-125,-124,-122,-123,-124,-124,-126,-127,-128,-128,-127,-127,-128,-128,127,127,127,-128,-127,-126,-124,-122,-121,-122,-122,-123,-122,-122,-124,-126,-127,-127,-126,-126,-126,-125,-126,-126,-127,-127,126,125,124,125,127,125,124,122,120,120,120,119,118,117,117,117,118,117,117,116,116,116,117,117,117,118,119,122,126,-125,-122,-120,-119,-119,-118,-118,-119,-119,-120,-120,-119,-119,-119,-120,-121,-122,-122,-122,-123,-124,-124,-126,-128,-128,-127,-126,-128,127,125,125,124,124,124,125,125,125,124,125,124,123,121,123,121,119,118,118,117,117,118,118,120,121,122,123,124,125,125,125,125,125,125,125,125,126,127,-127,-124,-121,-120,-120,-121,-121,-122,-122,-122,-122,-123,-124,-124,-124,-125,-124,-123,-122,-122,-123,-124,-126,-128,127,-128,126,125,123,123,122,122,123,125,126,126,125,125,123,123,121,122,121,120,119,118,119,119,119,121,121,122,123,123,123,124,124,124,124,125,125,126,126,127,-125,-123,-122,-122,-121,-120,-120,-121,-121,-121,-122,-122,-122,-124,-123,-123,-123,-123,-124,-125,-126,-127,-128,-128,-127,-128,126,126,126,125,126,-128,-128,-128,127,127,125,124,124,123,122,120,120,119,119,119,120,120,120,119,119,119,119,119,119,119,119,119,120,122,123,127,-127,-125,-123,-122,-122,-122,-122,-122,-121,-121,-121,-122,-122,-122,-121,-121,-122,-122,-124,-125,-126,-126,-126,-127,127,127,127,127,-128,-126,-126,-126,-126,-128,127,126,126,125,124,123,121,121,121,121,122,121,121,121,121,121,121,121,121,121,122,123,124,127,-127,-125,-124,-123,-123,-123,-124,-124,-124,-124,-124,-125,-125,-125,-124,-124,-125,-126,-127,-128,127,127,126,125,125,124,124,125,127,127,127,127,127,125,124,125,124,123,121,121,120,120,122,122,122,122,121,121,122,122,122,122,123,123,125,126,-126,-125,-124,-122,-122,-122,-122,-122,-122,-122,-123,-124,-124,-123,-123,-123,-124,-124,-126,-127,-127,-128,127,126,126,125,126,-128,-127,-127,-127,-128,127,126,126,125,123,123,122,121,121,122,122,121,121,121,121,121,121,121,121,122,124,126,-127,-126,-124,-123,-123,-123,-123,-123,-123,-123,-123,-124,-124,-123,-123,-124,-124,-126,-127,-128,-128,-128,126,126,125,126,-128,-127,-127,-128,-128,127,126,126,125,123,123,121,121,123,123,122,122,121,121,121,122,122,122,123,124,125,-127,-126,-124,-123,-123,-123,-123,-123,-123,-124,-124,-124,-124,-123,-123,-124,-124,-126,-127,-127,-128,127,126,126,126,127,-127,-127,-128,-128,127,126,126,125,123,123,122,121,123,123,122,122,121,121,121,122,122,123,123,125,127,-126,-125,-124,-123,-123,-123,-123,-123,-124,-124,-124,-124,-123,-123,-124,-125,-127,-128,-128,-128,126,126,126,126,-128,-127,-128,-128,127,126,127,125,124,123,122,122,123,123,123,122,121,121,122,122,122,123,123,125,-128,-126,-125,-124,-124,-124,-123,-123,-123,-124,-124,-124,-123,-124,-124,-125,-127,-128,-128,-128,126,126,126,126,-128,-127,-128,-128,127,126,126,125,123,123,122,122,123,123,122,122,121,121,122,122,123,123,125,-128,-126,-125,-124,-124,-124,-123,-123,-124,-124,-125,-125,-123,-124,-125,-126,-127,-128,-128,127,126,126,126,-128,-127,-128,-128,127,126,126,125,124,123,122,122,123,123,123,122,121,122,122,122,123,124,125,-127,-126,-125,-124,-124,-124,-123,-124,-124,-125,-125,-124,-124,-124,-125,-127,-128,-128,127,126,126,126,-128,-128,-128,-128,127,126,126,125,123,123,122,123,123,123,123,122,121,123,123,123,124,125,-128,-126,-125,-124,-124,-124,-123,-124,-124,-125,-125,-124,-124,-125,-126,-127,-128,-128,127,126,126,126,-128,-127,-128,-128,127,127,126,124,123,123,123,124,123,123,122,122,123,123,123,124,125,-128,-126,-125,-124,-124,-124,-123,-124,-124,-125,-125,-124,-124,-125,-126,-128,-128,-128,126,126,126}; }
	private static byte[] data4(){ return new byte[] {-128,-128,-128,-128,127,126,126,124,124,123,123,124,123,123,122,122,123,123,123,124,125,-127,-126,-125,-124,-124,-123,-124,-124,-125,-125,-124,-124,-125,-126,-127,-128,-128,127,126,126,127,-128,-128,-128,127,126,126,125,124,123,123,124,123,123,122,122,123,123,124,125,127,-126,-125,-124,-124,-124,-124,-124,-124,-125,-125,-124,-125,-126,-127,-128,-128,127,126,126,127,-128,-128,-128,127,127,126,124,124,123,124,124,123,123,122,123,123,123,124,125,-128,-126,-125,-124,-124,-124,-124,-125,-125,-125,-124,-125,-126,-127,-128,-128,127,126,126,127,-128,-128,-128,127,127,125,124,123,123,124,124,123,123,122,123,123,124,125,127,-127,-126,-125,-125,-124,-124,-125,-125,-126,-124,-125,-126,-127,-128,-128,127,126,126,-128,-128,-128,-128,127,127,125,124,123,123,124,124,123,123,123,123,123,124,125,-127,-126,-125,-125,-125,-124,-125,-125,-126,-125,-125,-126,-127,-128,-128,127,127,126,-128,-128,-128,-128,127,127,125,124,123,124,124,124,123,123,123,123,124,125,127,-127,-126,-125,-125,-124,-124,-125,-126,-126,-125,-126,-127,-128,-128,127,127,126,127,-128,-128,-128,127,126,125,124,123,124,124,124,123,123,124,123,124,125,-128,-126,-125,-125,-125,-124,-125,-126,-126,-125,-126,-126,-127,-128,-128,126,126,127,-128,-128,-128,127,127,125,124,124,124,124,124,123,123,124,124,125,126,-127,-126,-125,-125,-124,-124,-125,-126,-126,-125,-126,-127,-128,-128,127,126,126,-128,-128,-128,127,127,126,125,124,124,124,124,123,123,124,124,125,126,-127,-126,-125,-125,-124,-125,-125,-126,-125,-125,-126,-127,-128,-128,127,126,127,-128,-128,-128,127,126,125,124,124,125,124,124,123,124,124,125,125,-128,-126,-125,-125,-125,-125,-126,-126,-126,-125,-126,-127,-128,-128,127,126,127,-128,-128,127,127,126,125,124,124,125,124,123,123,124,124,125,127,-127,-126,-126,-126,-125,-126,-126,-126,-126,-126,-127,-128,-128,127,126,127,-128,-128,127,127,126,125,124,124,125,124,124,124,124,125,125,-128,-126,-126,-126,-125,-125,-126,-126,-126,-126,-126,-128,-128,127,127,127,-128,-128,-128,127,127,125,124,124,125,124,124,124,124,124,125,-128,-127,-126,-126,-125,-125,-126,-126,-126,-126,-127,-128,-128,127,127,127,-128,-128,127,127,126,125,124,125,125,124,124,124,124,125,126,-127,-126,-126,-126,-125,-126,-126,-126,-126,-126,-128,-128,127,127,127,-128,-128,-128,127,126,125,124,125,125,125,124,125,124,125,127,-127,-126,-126,-126,-126,-126,-126,-126,-126,-127,-128,-128,127,127,-128,-128,-128,127,127,125,125,124,125,125,124,124,125,125,126,-127,-126,-126,-126,-126,-126,-126,-126,-126,-127,-128,-128,127,127,-128,-128,-128,127,127,125,125,125,125,125,124,125,125,125,127,-127,-126,-126,-126,-126,-126,-126,-126,-127,-128,-128,127,127,127,-128,-128,127,127,126,125,125,125,125,124,125,125,125,127,-127,-126,-126,-126,-126,-126,-127,-126,-127,-128,-128,127,127,127,-128,-128,127,127,125,125,125,125,125,124,125,125,126,-128,-127,-126,-126,-126,-126,-127,-126,-127,-128,-128,127,127,127,-128,-128,127,127,126,125,125,125,125,124,125,125,126,-128,-127,-126,-126,-126,-126,-127,-126,-127,-128,-128,127,127,127,-128,-128,127,127,125,125,125,125,125,125,125,125,126,-128,-127,-126,-126,-126,-127,-126,-127,-127,-128,-128,127,127,-128,-128,127,127,126,125,125,125,125,125,125,125,126,-128,-127,-126,-126,-127,-127,-127,-127,-127,-128,-128,127,127,-128,-128,127,127,126,125,125,125,125,125,125,125,126,-128,-127,-127,-127,-126,-127,-127,-126,-127,-128,-128,-128,127,127,-128,-128,127,127,127,126,125,126,125,125,125,125,125,126,-128,-127,-127,-127,-126,-127,-127,-127,-127,-127,-128,-128,-128,127,127,-128,-128,-128,127,127,126,126,125,126,125,125,125,125,125,126,127,-128,-127,-127,-127,-126,-127,-127,-127,-127,-127,-127,-128,-128,127,127,127,-128,-128,-128,127,127,127,126,125,125,126,126,125,125,125,125,126,126,-128,-128,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-128,-128,-128,127,127,127,127,-128,-128,-128,127,127,127,126,126,125,126,126,126,125,125,126,125,126,126,127,-128,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-128,-128,-128,-128,127,127,127,127,-128,-127,-127,-127,-127,-127,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,-128,-128,-128,-127,-127,-126,-127,-127,-127,-127,-127,-127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,126,127,127,127,126,126,125,125,125,125,125,124,124,124,125,124,124,124,124,124,124,124,124,125,125,126,127,-128,-127,-126,-126,-126,-126,-126,-126,-126,-126,-126,-126,-126,-126,-126,-126,-127,-127,-127,-127,-127,-127,-128,-128,-128,-128,-128,-128,127,127,127,126,126,126,127,127,127,126,127,126,126,125,126,125,125,125,125,124,124,125,125,125,125,126,126,126,127,127,127,127,127,127,127,127,127,127,-128,-127,-126,-126,-126,-126,-126,-127,-127,-127,-127,-127,-127}; }
	private static byte[] data5(){ return new byte[] {-127,-127,-128,-127,-127,-127,-127,-127,-127,-128,-128,127,-128,127,127,126,126,126,126,126,127,127,127,127,127,126,126,125,126,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,127,127,127,127,127,-128,-127,-127,-127,-126,-126,-126,-126,-126,-126,-127,-127,-127,-127,-127,-127,-127,-127,-127,-128,-128,-128,-128,-128,-128,-128,127,127,127,127,127,-128,-128,-128,127,127,127,126,126,126,126,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,126,126,127,-128,-128,-127,-127,-127,-127,-127,-127,-126,-126,-126,-127,-127,-127,-126,-126,-127,-127,-127,-128,-128,-128,-128,-128,127,127,127,127,-128,-128,-128,-128,-128,-128,127,127,127,127,126,126,125,125,125,125,126,125,125,125,125,125,125,125,125,125,126,126,126,127,-128,-128,-127,-127,-127,-127,-127,-127,-127,-127,-127,-128,-128,-128,-127,-127,-128,-128,-128,-128,127,127,127,127,127,126,126,127,127,127,127,127,127,127,126,127,126,126,125,125,125,125,126,126,126,126,125,125,126,126,126,126,126,126,127,127,-128,-128,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-128,-128,-128,-128,127,127,127,127,127,-128,-128,-128,-128,-128,127,127,127,127,126,126,126,125,125,126,126,125,125,125,125,125,125,125,125,126,126,127,-128,-128,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-128,-128,-128,-128,-128,127,127,127,127,-128,-128,-128,-128,-128,127,127,127,127,126,126,125,125,126,126,126,126,125,125,125,126,126,126,126,126,127,-128,-128,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-128,-128,-128,-128,127,127,127,127,127,-128,-128,-128,-128,127,127,127,127,126,126,126,125,126,126,126,126,125,125,125,126,126,126,126,127,127,-128,-128,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-128,-128,-128,-128,-128,127,127,127,127,-128,-128,-128,-128,127,127,127,127,126,126,126,126,126,126,126,126,125,125,126,126,126,126,126,127,-128,-128,-128,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-128,-128,-128,-128,-128,127,127,127,127,-128,-128,-128,-128,127,127,127,127,126,126,126,126,126,126,126,126,125,125,126,126,126,126,127,-128,-128,-128,-127,-127,-127,-127,-127,-127,-127,-128,-128,-127,-127,-128,-128,-128,-128,-128,127,127,127,127,-128,-128,-128,-128,127,127,127,127,126,126,126,126,126,126,126,126,125,126,126,126,126,126,127,-128,-128,-128,-127,-127,-127,-127,-127,-127,-128,-128,-127,-127,-127,-128,-128,-128,-128,127,127,127,127,-128,-128,-128,-128,127,127,127,127,126,126,126,126,126,126,126,126,125,126,126,126,126,127,-128,-128,-128,-127,-127,-127,-127,-127,-127,-128,-128,-127,-127,-128,-128,-128,-128,-128,127,127,127,127,-128,-128,-128,-128,127,127,127,126,126,126,126,126,126,126,126,126,126,126,126,126,127,-128,-128,-128,-127,-127,-127,-127,-127,-127,-128,-128,-127,-127,-128,-128,-128,-128,-128,127,127,127,-128,-128,-128,-128,127,127,127,126,126,126,126,126,126,126,126,126,126,126,126,126,127,-128,-128,-128,-127,-127,-127,-127,-127,-128,-128,-127,-127,-128,-128,-128,-128,-128,127,127,127,127,-128,-128,-128,127,127,127,127,126,126,126,126,126,126,126,126,126,126,126,127,127,-128,-128,-127,-127,-127,-127,-127,-127,-128,-128,-127,-128,-128,-128,-128,-128,127,127,127,127,-128,-128,-128,127,127,127,126,126,126,126,126,126,126,126,126,126,126,126,127,-128,-128,-128,-127,-127,-127,-127,-128,-128,-128,-127,-128,-128,-128,-128,-128,127,127,127,127,-128,-128,-128,127,127,127,126,126,126,126,126,126,126,126,126,126,126,127,127,-128,-128,-128,-128,-127,-127,-128,-128,-128,-127,-128,-128,-128,-128,-128,127,127,127,-128,-128,-128,-128,127,127,127,126,126,126,126,126,126,126,126,126,126,126,127,-128,-128,-128,-128,-128,-127,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,-128,-128,-128,-128,127,127,127,126,126,126,126,126,126,126,126,126,126,127,127,-128,-128,-128,-128,-127,-127,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,127,-128,-128,-128,127,127,127,126,126,126,126,126,126,126,126,126,126,127,-128,-128,-128,-128,-128,-127,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,-128,-128,-128,127,127,127,126,126,126,126,126,126,126,126,126,127,127,-128,-128,-128,-128,-127,-127,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,-128,-128,-128,127,127,127,127,126,126,126,126,126,126,126,126,127,127,-128,-128,-128,-128,-127,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,-128,-128,-128,127,127,127,126,126,127,126,126,126,126,126,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,-128,-128,127,127,127,127,126,126,127,126,126,126,126,126,127,127,-128,-128,-128,-128,-128,-128,-128}; }
	private static byte[] data6(){ return new byte[] {-128,-128,-128,-128,-128,-128,127,127,127,-128,-128,127,127,127,127,126,126,127,126,126,126,126,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,-128,-128,-128,127,127,127,126,126,127,126,126,126,126,126,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,-128,-128,127,127,127,127,126,127,127,126,126,126,126,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,-128,-128,-128,127,127,127,126,127,127,127,126,127,126,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,-128,-128,-128,127,127,127,127,126,127,127,126,126,127,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,-128,-128,-128,127,127,127,127,127,127,127,126,127,127,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,-128,-128,127,127,127,127,127,127,127,126,127,127,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,-128,-128,127,127,127,127,127,127,127,126,127,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,-128,-128,127,127,127,127,127,127,127,126,127,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,-128,-128,127,127,127,127,127,127,127,127,127,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,-128,-128,127,127,127,127,127,127,127,127,127,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,-128,-128,127,127,127,127,127,127,127,127,127,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,-128,-128,127,127,127,127,127,127,127,127,127,127,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,-128,-128,-128,127,127,127,127,127,127,127,127,127,127,127,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,-128,-128,-128,127,127,127,127,127,127,127,127,127,127,127,127,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,127,-128,-128,-128,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,127,127,127,127,127,127,127,127,127,127,126,126,126,127,126,126,126,126,126,126,126,126,127,127,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,126,126,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,-128,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,127,127,-128,-128,-128,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,127,-128,-128,-128,-128,-128,-128,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,127,127,-128,-128,-128,-128,-128,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,127,-128,-128,-128,-128,-128,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,-128,127,127,127,127,127,-128,-128,-128,-128,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,-128,-128,-128,-128,-128,-128,-128}; }
	private static byte[] data7(){ return new byte[] {}; }
	private static byte[] getData(){
		byte[] data = new byte[8078];
		System.arraycopy(data0(), 0, data, 0, 1024);
		System.arraycopy(data1(), 0, data, 1024, 1024);
		System.arraycopy(data2(), 0, data, 2048, 1024);
		System.arraycopy(data3(), 0, data, 3072, 1024);
		System.arraycopy(data4(), 0, data, 4096, 1024);
		System.arraycopy(data5(), 0, data, 5120, 1024);
		System.arraycopy(data6(), 0, data, 6144, 1024);
		System.arraycopy(data7(), 0, data, 7168, 910);
		return data;
	}
	/** Constructs a new AudioClip with the data from attack.wav. */
	public Flap(){
		data = getData();
		format = new AudioFormat(AudioFormat.Encoding.PCM_UNSIGNED, (float)(22050.0), 8, 1, 1, (float)(22050.0), false);
		lineInfo = new DataLine.Info(SourceDataLine.class, format, AudioSystem.NOT_SPECIFIED);
		try{ AudioSystem.getLine(lineInfo); }
		catch(IllegalArgumentException ex){ lineInfo = null; }
		catch(LineUnavailableException e){}
	}
	/** A separate thread for playing attack.wav. */
	private class PlayThread extends Thread {
		private byte[] data;
		private AudioFormat format;
		private DataLine.Info lineInfo;
		private SourceDataLine line = null;
		private boolean playing = true;
		public PlayThread(byte[] d, AudioFormat f, DataLine.Info i){ data = d; format = f; lineInfo = i; }
		public void run(){
			try{
				line = (SourceDataLine) AudioSystem.getLine(lineInfo);
				line.open(format, AudioSystem.NOT_SPECIFIED);
				line.start();
				int written = 0;
				int available;
				while(written < data.length && playing){
					available = Math.min(line.available(), data.length - written);
					line.write(data, written, available);
					written += available;
				}
				int frames = data.length / format.getFrameSize();
				while(line.getFramePosition() < frames && playing) Thread.sleep(0);
			}
			catch(InterruptedException ex){ playing = false; }
			catch(LineUnavailableException ex){}
			if(line != null){ line.stop(); line.flush(); line.close(); }
			playing = false;
		}
		public void interrupt(){ playing = false; }
		public boolean isPlaying(){ return playing; }
	}
	/** A separate thread for looping play of attack.wav. */
	private class LoopThread extends Thread {
		private Flap clip;
		private boolean looping = true;
		public LoopThread(Flap c){ clip = c; }
		public void run(){
			while(looping){
				clip.play();
				while(clip.isPlaying() && looping){
					try{ Thread.sleep(0); }
					catch(InterruptedException ex){ looping = false; break; }
				}
			}
			if(!clip.isLooping()) clip.stop();
		}
		public void interrupt(){ looping = false; }
		public boolean isLooping(){ return looping; }
	}
	/** Plays attack.wav from the beginning, even if it is already playing or looping. */
	public void play(){ if(lineInfo == null) return; doPlay(); }
	private synchronized void doPlay(){
		doStopPlay();
		playThread = new PlayThread(data, format, lineInfo);
		playThread.start();
	}
	/** Plays attack.wav continuously until stopped. */
	public void loop(){ if(lineInfo == null) return; doLoop(); }
	private synchronized void doLoop(){
		doStopLoop();
		loopThread = new LoopThread(this);
		loopThread.start();
	}
	/** Stops play and looping of attack.wav. */
	public void stop(){ if(lineInfo == null) return; doStop(); }
	private synchronized void doStop(){
		doStopPlay();
		doStopLoop();
	}
	private void doStopPlay(){
		if(playThread == null) return;
		if(playThread.isPlaying()) playThread.interrupt();
		playThread = null;
	}
	private void doStopLoop(){
		if(loopThread == null) return;
		if(loopThread.isLooping()) loopThread.interrupt();
		loopThread = null;
	}
	/** Tests if attack.wav is currently playing or looping.
	 * @return <tt>true</tt> if playing or looping, <tt>false</tt> otherwise */
	public boolean isPlaying(){ if(lineInfo == null) return false; return doIsPlaying(); }
	private synchronized boolean doIsPlaying(){
		if(loopThread == null && playThread == null) return false;
		else if(loopThread == null) return playThread.isPlaying();
		else if(playThread == null) return loopThread.isLooping();
		else return loopThread.isLooping() && playThread.isPlaying();
	}
	/** Tests if attack.wav is currently looping.
	 * @return <tt>true</tt> if looping, <tt>false</tt> otherwise */
	public boolean isLooping(){ if(lineInfo == null) return false; return doIsLooping(); }
	private synchronized boolean doIsLooping(){
		if(loopThread == null) return false;
		else return loopThread.isLooping();
	}
}